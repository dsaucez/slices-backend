#!/bin/bash -ex
XP={{ name }}

KUBECONFIG=$(pwd)/RBAC/{{ k8s_user }}/config-{{ k8s_user }}
KUBECONFIG=~/RBAC/{{ k8s_user }}/config-{{ k8s_user }}
KUBECONFIG=~/kubeconfig-pos

DIR=$(dirname $(realpath "$0"))
RESULTS_DIR=/srv/testbed/results/

rm -rf "$DIR/.venv"
python3 -m venv "$DIR/.venv"
source "$DIR/.venv/bin/activate"
pip install -r requirements.txt

slices project use {{ project }}
TOKEN=$(slices auth id-token n5qsyXbYTeI89uVG3XLmYr2r)

echo "token: $TOKEN" > pos/token

# this exists due to a bug in ansible...
export LC_ALL="C.UTF-8"

IMAGE="ubuntu-jammy"
POS=pos

DEPLOY_NODE={{ deploy_node }}

$POS allocations free -k $DEPLOY_NODE
$POS allocations allocate --result-folder "$XP" $DEPLOY_NODE
$POS nodes image $DEPLOY_NODE $IMAGE

$POS nodes reset $DEPLOY_NODE &

wait

# 0. Prepare deployment node
$POS commands launch $DEPLOY_NODE -- mkdir -p pos
$POS commands launch $DEPLOY_NODE -- mkdir -p .pos

if [ ! -f ~/.ssh/id_rsa.pub ]; then ssh-keygen -t rsa -b 4096 -N "" -f ~/.ssh/id_rsa; fi
ssh-copy-id -i ~/.ssh/id_rsa.pub -f root@$DEPLOY_NODE

## secret files
$POS nodes copy --dest .pos/token $DEPLOY_NODE  pos/token

# experiment files
$POS nodes copy --dest pos/hosts $DEPLOY_NODE  pos/hosts
$POS nodes copy --dest pos/get_xp.sh $DEPLOY_NODE  pos/get_xp.sh
$POS nodes copy --dest pos/5g.sh $DEPLOY_NODE  pos/5g.sh
$POS nodes copy --dest pos/5g.yaml $DEPLOY_NODE  pos/5g.yaml
$POS nodes copy --dest pos/params.yaml $DEPLOY_NODE  pos/params.yaml
$POS nodes copy --dest pos/params.5g.yaml $DEPLOY_NODE  pos/params.5g.yaml
$POS nodes copy --dest pos/params_dmi.yaml $DEPLOY_NODE  pos/params_dmi.yaml
$POS nodes copy --recursive --dest pos/oai-cn5g-fed-custom $DEPLOY_NODE  oai-cn5g-fed 

ANSIBLE_ROLES_PATH=roles ansible-playbook --extra-vars "@pos/params.yaml" --extra-vars "_kube_config_local_path=$KUBECONFIG" -i pos/hosts pos/provision.yaml

# Deploy the 5G network
$POS commands launch $DEPLOY_NODE --infile "pos/5g.sh" --verbose --name "5g.sh"

# Get and run the experiment
$POS commands launch $DEPLOY_NODE "pos/get_xp.sh" --verbose --name "get_xp.sh"
$POS commands launch $DEPLOY_NODE "xp/xp.sh" --verbose --name "xp.sh"

# 5. Publish results
ALLOC_ID=$( $POS allocations show $DEPLOY_NODE | jq -r .id )
RESULTS_FOLDER=$RESULTS_DIR/$($POS allocations show $ALLOC_ID | jq -r .result_folder)

RESULTS_SIZE=$(du -bs $RESULTS_FOLDER | cut -f 1)
POS_SIZE=$(du -bs pos | cut -f 1)
ARTIFACT_SIZE=$(( $RESULTS_SIZE + $POS_SIZE ))
echo $ARTIFACT_SIZE
echo $RESULTS_FOLDER

tar -cvvzf dataset.tar.gz pos -C $RESULTS_FOLDER . 

DMI_TOKEN=$(slices auth get-for-audience https://mrs-portal.slices-staging.slices-be.eu)
echo "token: $DMI_TOKEN" > pos/dmi_token
## secret files
$POS nodes copy --dest .pos/dmi_token $DEPLOY_NODE  pos/dmi_token

if [ ! -d ~/mini-dmi ]; then git clone https://gitlab.inria.fr/slices-ri/mini-dmi.git ~/mini-dmi; fi
$POS nodes copy --recursive --dest mini-dmi $DEPLOY_NODE ~/mini-dmi
$POS nodes copy --recursive --dest mini-dmi/storage-client-playground/ $DEPLOY_NODE dataset.tar.gz

ansible-playbook -i pos/hosts --extra-vars "@pos/params_dmi.yaml"  --extra-vars "artifact_size=${ARTIFACT_SIZE}" --extra-vars "@pos/dmi_token" dmi.yaml