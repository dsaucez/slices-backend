global:
  nfConfigurationConfigMap: oai-5g-basic
  clusterIpServiceIpAllocation: true #this will allocate ip-address to cluster Ip service
  waitForNRF: true
  loadBalancerIP: {{ network.ips.nrf.loadBalancerIP }}
  http2Param: "--http2-prior-knowledge"  # if waitForNRF is true and http2 is used for all NF then this param is needed
  timeout: 1
mysql:
  enabled: true
  imagePullPolicy: IfNotPresent
  oai5gdatabase: basic
  imagePullSecrets:
    - name: "regcred"
  persistence:
    enabled: false
oai-nrf:
  enabled: true
  kubernetesType: Vanilla #Openshift/Vanilla Vanilla for Upstream Kubernetes
  nfimage:  # image name either locally present or in a public/private repository
    repository: docker.io/oaisoftwarealliance/oai-nrf          ## The image will be pulled from dockerhub
    version: v2.0.1                          ## The branch to be used to pull from dockerhub
    # pullPolicy: IfNotPresent or Never or Always
    pullPolicy: IfNotPresent
  includeTcpDumpContainer: false #only for taking pcaps inside network function pod
  imagePullSecrets:
    - name: "regcred"
  config:
    logLevel: "debug"   #allowed info/error/debug
  nodeSelector: {}
oai-udr:
  enabled: true
  kubernetesType: Vanilla #Openshift/Vanilla Vanilla for Upstream Kubernetes
  nfimage:  # image name either locally present or in a public/private repository
    repository: docker.io/oaisoftwarealliance/oai-udr           ## The image will be pulled from dockerhub
    version: v2.0.1                                    ## The branch to be used to pull from dockerhub
    # pullPolicy: IfNotPresent or Never or Always
    pullPolicy: IfNotPresent
  includeTcpDumpContainer: false #only for taking pcaps inside network function pod
  imagePullSecrets:
    - name: "regcred"
  config:
    logLevel: "debug"   #allowed info/error/debug
  nodeSelector: {}
oai-udm:
  enabled: true
  kubernetesType: Vanilla #Openshift/Vanilla Vanilla for Upstream Kubernetes
  nfimage:  # image name either locally present or in a public/private repository
    repository: docker.io/oaisoftwarealliance/oai-udm           ## The image will be pulled from dockerhub
    version: v2.0.1                                    ## The branch to be used to pull from dockerhub
    # pullPolicy: IfNotPresent or Never or Always
    pullPolicy: IfNotPresent
  includeTcpDumpContainer: false #only for taking pcaps inside network function pod
  imagePullSecrets:
    - name: "regcred"
  config:
    logLevel: "debug"   #allowed info/error/debug
  nodeSelector: {}
oai-ausf:
  enabled: true
  kubernetesType: Vanilla #Openshift/Vanilla Vanilla for Upstream Kubernetes
  nfimage:  # image name either locally present or in a public/private repository
    repository: docker.io/oaisoftwarealliance/oai-ausf           ## The image will be pulled from dockerhub
    version: v2.0.1                                    ## The branch to be used to pull from dockerhub
    # pullPolicy: IfNotPresent or Never or Always
    pullPolicy: IfNotPresent
  includeTcpDumpContainer: false #only for taking pcaps inside network function pod
  imagePullSecrets:
    - name: "regcred"
  config:
    logLevel: "debug"   #allowed info/error/debug
  nodeSelector: {}
oai-amf:
  enabled: true
  kubernetesType: Vanilla #Openshift/Vanilla Vanilla for Upstream Kubernetes
  nfimage:  # image name either locally present or in a public/private repository
    repository: docker.io/oaisoftwarealliance/oai-amf           ## The image will be pulled from dockerhub
    version: v2.0.1                                    ## The branch to be used to pull from dockerhub
    # pullPolicy: IfNotPresent or Never or Always
    pullPolicy: IfNotPresent
  includeTcpDumpContainer: false #only for taking pcaps inside network function pod
  imagePullSecrets:
    - name: "regcred"
  multus:
    ## If you don't want to add a default route in your pod then replace this field with ""
    defaultGateway: ""
    n2Interface:
      create: true
      Ipadd: "{{ network.ips.amf.n2.ip }}"
      Netmask: "{{ network.ips.amf.n2.prefixlen }}"
      # #name inside the pod is hardcoded right now
      # name: "n2"
      ## If you do not have a gateway leave the field empty
      Gateway:
      ## If you do not want to add any routes in your pod then leave this field empty
      routes: {{ network.routes | default("")}}
      hostInterface: {{ network.hostInterface | default("bond0") }} # Interface of the host machine on which this pod will be scheduled
  nodeSelector: {}
oai-upf:
  enabled: true
  kubernetesType: Vanilla #Openshift/Vanilla Vanilla for Upstream Kubernetes
  nfimage:  # image name either locally present or in a public/private repository
    repository: docker.io/oaisoftwarealliance/oai-upf    ## The image will be pulled from dockerhub
    version: v2.0.1                                    ## The branch to be used to pull from dockerhub
    # pullPolicy: IfNotPresent or Never or Always
    pullPolicy: IfNotPresent
  includeTcpDumpContainer: false #only for taking pcaps inside network function pod
  imagePullSecrets:
    - name: "regcred"
  # create an extra interface for N3 incase the gNB is outside the cluster network or there is a need to have dedicated interface for N3
  ## Change these ip-addresses according to your environment
  ## N4, N6 are optional only if you want that UPF uses different subnets for different 3gpp interfaces. 
  multus:
    ## If you don't want to add a default route in your pod then replace this field with ""
    defaultGateway: ""
    n3Interface:
      create: true
      Ipadd: "{{ network.ips.upf.n3.ip }}"
      Netmask: "{{ network.ips.upf.n3.prefixlen }}"
      # #name inside the pod is hardcoded right now
      # name: "n3"
      ## If you do not have a gateway leave the field empty
      Gateway: ""
      ## If you don't want to add a default route in your pod then replace this field with ""
      routes: {{ network.routes | default("") }}
      hostInterface: {{ network.hostInterface | default("bond0") }}
    ## For n4 it is better to re-use eth0 interface inside the pod (primary CNI of Kubernetes)
    n4Interface:
      create: true
      Ipadd: "{{ network.ips.upf.n4.ip }}"
      Netmask: "{{ network.ips.upf.n4.prefixlen }}"
      # #name inside the pod is hardcoded right now
      # name: "n4"
      ## If you do not have a gateway leave the field empty
      Gateway: ""
      ## If you do not want to add any routes in your pod then leave this field empty
      routes: ""
      hostInterface: {{ network.hostInterface | default("bond0") }}
    n6Interface:
      create: true
      Ipadd: "{{ network.ips.upf.n6.ip }}"
      Netmask: "{{ network.ips.upf.n6.prefixlen }}"
      # #name inside the pod is hardcoded right now
      # name: "n6"
      ## If you do not have a gateway leave the field empty
      Gateway: ""
      ## If you do not want to add any routes in your pod then leave this field empty
      routes: ""
      hostInterface: {{ network.hostInterface | default("bond0") }}
  #NOTE: If the interface you selected for n6If is wrong then traffic will not be routed towards internet
  nodeSelector: {}
# oai-traffic-server:
#  enabled: false
#  weight: 6
#  kubernetesType: Vanilla
#  trafficServer:
#    repository: docker.io/oaisoftwarealliance/trf-gen-cn5g
#    version: latest
#    #pullPolicy: IfNotPresent or Never or Always
#    pullPolicy: IfNotPresent
#  #Without multus traffic server won't be able to forward packets to spgwu if can't use server then add an extra container in spgwu with iperf3 or install iperf3 package in tcpdump container
#  multus:
#    create: true
#    IPadd: "172.21.6.99"
#    Netmask: "22"
#    defaultGateway: "172.21.7.254"
#    hostInterface: {{ network.hostInterface | default("bond0") }}	# Interface of the host machine on which this pod will be scheduled
#  config:
#    ueroute: 12.1.1.0/24
#    upfIpadd: 172.21.6.95
#    noOfIperf3Server: 10
oai-smf:
  enabled: true
  kubernetesType: Vanilla #Openshift/Vanilla Vanilla for Upstream Kubernetes
  nfimage:  # image name either locally present or in a public/private repository
    repository: docker.io/oaisoftwarealliance/oai-smf           ## The image will be pulled from dockerhub
    version: v2.0.1                         ## The branch to be used to pull from dockerhub
    # pullPolicy: IfNotPresent or Never or Always
    pullPolicy: IfNotPresent
  includeTcpDumpContainer: false #only for taking pcaps inside network function pod
  multus:
    ## If you don't want to add a default route in your pod then replace this field with ""
    defaultGateway: ""
    n4Interface:
      create: true
      Ipadd: "{{ network.ips.smf.n4.ip }}"
      Netmask: "{{ network.ips.smf.n4.prefixlen }}"
      ## If you do not have a gateway leave the field empty
      Gateway: ""
      ## If you do not want to add any routes in your pod then leave this field empty
      #routes: [{'dst': '10.8.0.0/24','gw': '172.21.7.254'}, {'dst': '10.9.0.0/24','gw': '172.21.7.254'}]
      routes: {{ network.routes | default("") }}
      hostInterface: {{ network.hostInterface | default("bond0") }}
  nodeSelector: {}
  imagePullSecrets:
    - name: "regcred"
  # nodeSelector: {}
