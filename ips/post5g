#!/bin/bash

# Function to display usage information
usage() {
  echo "Usage: $0 experiment [get|launch|prefix|cleanup] <experiment_name> [--release]"
  echo "       $0 nodes [start|stop] <node_name>"
  exit 1
}

start_node(){
  local node="$1"

  TOKEN="$(slices auth id-token pos)"
  curl -s -X PATCH "https://post5g-backend.slices-be.eu/r2lab/$node"   -H 'accept: application/json' -H "Bearer: ${TOKEN}"

  curl -X 'PATCH' \
  "https://post5g-backend.slices-be.eu/r2lab/$node/" \
  -H 'accept: application/json' \
  -H "Bearer: ${TOKEN}" \
  -H 'Content-Type: application/json' \
  -d '{
  "state": "ON"
  }'
}

stop_node(){
  local node="$1"

  TOKEN="$(slices auth id-token pos)"
  curl -s -X PATCH "https://post5g-backend.slices-be.eu/r2lab/$node"   -H 'accept: application/json' -H "Bearer: ${TOKEN}"

  curl -X 'PATCH' \
  "https://post5g-backend.slices-be.eu/r2lab/$node/" \
  -H 'accept: application/json' \
  -H "Bearer: ${TOKEN}" \
  -H 'Content-Type: application/json' \
  -d '{
  "state": "OFF"
  }'
}

get_experiment_id(){
  local experiment_name="$1"

  if [[ "$experiment_name" == xp_expauth.ilabt.imec.be_* ]]; then
    local $experiment_id = $experiment_name
  else
    local experiment_id=$(slices experiment show $experiment_name --format json |jq .id | tr -d \")
  fi

  echo $experiment_id
}

# Function to get floating IPs for a project
get_prefix() {
  local project_id="$1"
  local experiment_name="$2"

  TOKEN="$(slices auth id-token pos)"
  # curl -s -X GET "https://post5g-backend.slices-be.eu/prefix/"   -H 'accept: application/json' -H "Bearer: ${TOKEN}"

  XP_TOKEN="$(slices experiment jwt $experiment_name)"
  curl -X 'POST' "https://post5g-backend.slices-be.eu/prefix/"   -H 'accept: application/json' -H 'Content-Type: application/json' -H "Bearer: ${TOKEN}" -d "{\"token\": \"$XP_TOKEN\"}"
}

# Function to release floating IPs for a project
release_prefix() {
  local project_id="$1"
  local experiment_name="$2"

  TOKEN="$(slices auth id-token pos)"
  # curl -s -X GET "https://post5g-backend.slices-be.eu/prefix/"   -H 'accept: application/json' -H "Bearer: ${TOKEN}"

  XP_TOKEN="$(slices experiment jwt $experiment_name)"
  curl -X 'DELETE' "https://post5g-backend.slices-be.eu/prefix/"   -H 'accept: application/json' -H 'Content-Type: application/json' -H "Bearer: ${TOKEN}" -d "{\"token\": \"$XP_TOKEN\"}"
}


# Function to fetch experiment details
get_experiment() {
  local project_id="$1"
  local experiment_name="$2"
  echo "Fetching details for experiment $project_id / $experiment_name"

  experiment_id=$(get_experiment_id $experiment_name)

  echo $experiment_id
  echo "$experiment_id" | sed 's/.*_\([a-z0-9]*\)/\1/'

  DIR=xp/$project_id/$experiment_name/

  mkdir -p $DIR
  cd $DIR

  wget -q https://gitlab.inria.fr/slices-ri/blueprints/post-5g/reference_implementation/-/archive/develop/reference_implementation-develop.tar.gz
  tar -xzf reference_implementation-develop.tar.gz
  rm reference_implementation-develop.tar.gz


  TOKEN="$(slices auth id-token pos)"
  status_code=$(curl -s -X GET "https://post5g-backend.slices-be.eu/pos/script/${experiment_id}" -w "%{http_code}"  -H 'accept: application/json' -H "Bearer: ${TOKEN}" --output ${experiment_id}.zip)
  if [ $status_code -ne 200 ]; then
    echo "Experiment not found" >&2
    exit 1
  fi
  unzip -qq -o -d reference_implementation-develop/ ${experiment_id}.zip
  chmod a+r -R reference_implementation-develop/

  curl -X 'POST' 'https://post5g-backend.slices-be.eu/k8s/centralhub' -H 'accept: application/json'  -H "Bearer: ${TOKEN}" -d '' -s > ~/kubeconfig-pos

  echo "Details for experiment $experiment_name saved in $DIR"
}

# Function to launch the experiment
launch_experiment() {
  local project_id="$1"
  local experiment_name="$2"
  
  echo "Launching experiment $project_id / $experiment_name"

  DIR=xp/$project_id/$experiment_name/

  cd $DIR/reference_implementation-develop
  chmod u+x pos/deploy.sh
  pos/deploy.sh
}

cleanup() {
  local project_id="$1"
  local experiment_name="$2"

  TOKEN="$(slices auth id-token pos)"
  XP_TOKEN="$(slices experiment jwt $experiment_name)"

  status_code=$(curl -o $$.log -s -w "%{http_code}" -X 'POST' "https://post5g-backend.slices-be.eu/cleanup/"   -H 'accept: application/json' -H 'Content-Type: application/json' -H "Bearer: ${TOKEN}" -d "{\"token\": \"$XP_TOKEN\"}")
  if [ $status_code -ne 200 ]; then
    echo "Error while cleaning" >&2
    cat $$.log
    rm $$.log
    exit 1
  fi

  cat $$.log
  rm $$.log
  release_prefix "$project_id" "$experiment_name"
}

#########
# Check that the correct number of arguments are passed
if [ "$#" -lt 3 ]; then
  echo "Error: Insufficient arguments."
  usage
fi

# Assign the first and second arguments
type="$1"
command="$2"

# Handle "experiment" related commands
if [ "$type" == "experiment" ]; then
  if [ "$#" -lt 3 ]; then
    echo "Error: Insufficient arguments for experiment."
    usage
  fi

  release_flag="false"
  if [ "$#" -ge 4 ] && [ "$4" == "--release" ]; then
    release_flag="true"
  fi
  if [ "$#" -ge 4 ] && [ "$4" != "--release" ]; then
    usage
  fi

  experiment_name="$3"

  project_id=$(slices project show -f json | jq .name | tr -d \")

  case "$command" in
    get)
      get_experiment "$project_id" "$experiment_name"
      ;;
    launch)
      launch_experiment "$project_id" "$experiment_name"
      ;;
    cleanup)
      cleanup "$project_id" "$experiment_name"
      ;;
    prefix)
      # get_prefix "$project_id" "$experiment_name"
      if [ "$release_flag" == "true" ]; then
        release_prefix "$project_id" "$experiment_name"
      else
        get_prefix "$project_id" "$experiment_name"
      fi
      ;;
    *)
      echo "Error: Invalid command '$command'."
      usage
      ;;
  esac

# Handle "nodes" related commands
elif [ "$type" == "nodes" ]; then
  if [ "$#" -lt 3 ]; then
    echo "Error: Insufficient arguments for nodes."
    usage
  fi

  node_name="$3"

  case "$command" in
    start)
      start_node "$node_name"
      ;;
    stop)
      stop_node "$node_name"
      ;;
    *)
      echo "Error: Invalid command '$command'."
      usage
      ;;
  esac

else
  echo "Error: Invalid type '$type'."
  usage
fi