openapi: 3.0.1
info:
  title: SLICES post-5G blueprint backend
  description: Backend server to manage the post-5G blueprint
  version: 0.1.0

servers:
  - url: http://localhost:8008/
    description: Local Dev server

paths:
  /authentication:
    get:
      summary: Redirection to the OIDC URL to generate authentication code
      description: Redirection to the OIDC URL to generate authentication code
      parameters:
        - in: query
          description: URI from where the client comes from, encoded in BASE64
          name: requested_uri
          schema:
            type: string
          required: true

      responses:
        '302':    # status code
          description: URL to be redirected to in order to get authenticated

  /redirect-call:
    get:
      summary: Finalize the auhtentication with OIDC based on authentication code
      description: Finalize the auhtentication with OIDC based on authentication code
      parameters:
        - in: query
          name: code
          description: authorization code generated by OIDC
          schema:
            type: string
          required: true
        - in: query
          description: URI to which the client must be redirected to, encoded in BASE64
          name: state
          schema:
            type: string
          required: true
      responses:
        '302':    # status code
          description: Redirected to the requested URI
          headers:
            Set-Cookie:
              description: the OIDC authentication cookie, called `token`
              schema:
                $ref: '#/components/schemas/token'
        '500':
          description: On error
          content:
            text/plain:
              schema:
                type: string
                
  /token:
    get:
      summary: Generate and return an JWT API token
      description: Generate and return an JWT API token
      responses:
        '200':    # status code
          description: The token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tokenmap"

  /logout:
    get:
      summary: Logout the user
      description: Logout the user
      parameters:
        - "in": cookie
          name: token
          schema:
            $ref: '#/components/schemas/token'
      responses:
        '200':    # status code
          description: no content returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'

  /core/:
    post:
      summary: Create a core
      description: 'Create a core'
      parameters:
        - "in": cookie
          name: token
          schema:
            $ref: '#/components/schemas/token'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CoreParams'
      responses:
        '201':
          description: OK, returns all information about the core
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Core'
        '500':
          description: Error while processing the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /core/{id}:
    parameters:
    - "in": path
      name: id
      allowEmptyValue: false
      required: true
      schema:
        $ref: '#/components/schemas/uuid'
    - "in": cookie
      name: token
      schema:
        $ref: '#/components/schemas/token'
    - "in": query
      name: action
      schema:
        $ref: '#/components/schemas/CoreActions'
      required: false
    get:
      summary: Get core configuration
      description: Get core configuration

      responses:
        '200':    # status code
          description: Core information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Core'
        '404':    # status code
          description: Core not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
    delete:
      summary: Delete the core configuration
      description: Delete the core configuration
      responses:
        '200':    # status code
          description: Core is successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
        '404':    # status code
          description: Core not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'

  /core/{id}/UE:
    post:
      summary: Add a UE to the database
      description: Add a UE to the database
      parameters:
        - "in": path
          name: id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - "in": cookie
          name: token
          schema:
            $ref: '#/components/schemas/token'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UE'
      responses:
        '200':    # status code
          description: UE added in the database if it did not exist yet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'

  /core/{id}/UPF:
    post:
      summary: Add a UE to the database
      description: Add a UE to the database
      parameters:
        - "in": path
          name: id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - "in": cookie
          name: token
          schema:
            $ref: '#/components/schemas/token'
      requestBody:
        content:
          application/yaml:
            schema:
              $ref: '#/components/schemas/Upf'

      responses:
        '200':    # status code
          description: UE added in the database if it did not exist yet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'

  /core/{id}/UE/{imsi}:
    get:
      summary: Get UE information
      description: GET UE information
      parameters:
        - "in": path
          name: id
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - "in": path
          name: imsi
          required: true
          schema:
            $ref: '#/components/schemas/imsi'
        - "in": cookie
          name: token
          schema:
            $ref: '#/components/schemas/token'
      responses:
        '200':    # status code
          description: UE information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UE'

  /cores/:
    get:
      summary: List all cores
      description: 'List all cores'
      parameters:
        - "in": cookie
          name: token
          schema:
            $ref: '#/components/schemas/token'
      responses:
        '200':
          description: OK, returns all information about the core
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Core'

components:
  schemas:
    # == Atomic schemas ========================================================
    Error:
      type: object
      properties:
        error:
          type: string
          example: Failed to read Request

    Empty:
      type: object
    
    uuid:
      type: string
      example: "949c72df-6597-4273-ab4b-aa6d766b9c95"
    
    imsi:
      type: string
      example: "001010000000001"  
    
    dnn:
      type: string
      example: "internet"

    mcc:
      type: string
      description: MCC
      example: "001"

    mnc:
      type: string
      description:  MNC
      example: "01"

    tac:
      type: string
      description: TAC, expressed in hexadecimal
      example: "0x0001"

    plnm:
      type: string
      description: PLNM
      example: "00101"

    sst: 
      type: integer
      description:  sst
      example: 1

    sd:
      type: string
      description: Slice Descriptor, expressed in hexadecimal
      example: "FFFFFF"

    ipaddr:
      type: string 
      example: 192.0.2.42

    ipsubnet:
      type: string
      example: 192.0.2.0/24

    region_id:
      type: string
      example: "01"

    set_id:
      type: string
      example: "001"
    
    amf_pointer:
      type: string
      example: "01"

    token:
      type: string
      description: JWT API token
      example: edited.edited.edited; Path=/; Expires=Thu, 15 May 2025 21:33:45 GMT;


    tokenmap:
      type: object
      properties:
        token:
          $ref: "#/components/schemas/token"

    5qi:
      type: integer
      minimum: 0
      maximum: 256
      example: 5

    bandwidth:
      type: string
      example: 200Mbps

    # == 5G objects ============================================================
    nssai:
      type: object
      required:
        - sst
      properties:
        sst:
          $ref: '#/components/schemas/sst'
        sd:
          $ref: '#/components/schemas/sd'

    dnnInfo:
      type: object
      properties:
        dnn: 
          $ref: '#/components/schemas/dnn'
        pdu_session_type:
          type: string
          enum:
            - IPv4
            - IPV4V6
            - IPv6
        ipv4_subnet:
          $ref: "#/components/schemas/ipsubnet"

    sNssaiSmfInfo:
      type: object
      properties:
        sNssai:
          $ref: '#/components/schemas/nssai'
          required: true
        dnnSmfInfoList:
          type: array
          items:
            type: object
            properties:
              dnn:
                $ref: '#/components/schemas/dnn'
            uniqueItems: true

    sNssaiSmfInfoList:
      type: array
      items:
        $ref: '#/components/schemas/sNssaiSmfInfo'

    qos_profile:
      type: object
      required:
        - 5qi
        - session_ambr_ul
        - session_ambr_dl
      properties:
        5qi:
          $ref: '#/components/schemas/5qi'
        session_ambr_ul:
          $ref: "#/components/schemas/bandwidth"
        session_ambr_dl:
          $ref: "#/components/schemas/bandwidth"

    local_subscription_infos:
      type: object
      required:
        - single_nssai
        - dnn
        - qos_profile
      properties:
        single_nssai:
          $ref: "#/components/schemas/nssai"
        dnn:
          $ref: '#/components/schemas/dnn'
          required: true
        qos_profile:
          $ref: "#/components/schemas/qos_profile"

    local_subscription_infos_list:
      type: array
      items:
        $ref: '#/components/schemas/local_subscription_infos'

    sNssaiUpfInfo:
      type: object
      properties:
        sNssai:
          $ref: '#/components/schemas/nssai'
          required: true
        dnnUpfInfoList:
          type: array
          items:
            type: object
            properties:
              dnn:
                $ref: '#/components/schemas/dnn'
            uniqueItems: true

    sNssaiUpfInfoList:
      type: array
      items:
        $ref: '#/components/schemas/sNssaiUpfInfo'

    plmn_support:
      type: object
      properties:
        mcc:
          $ref: '#/components/schemas/mcc'
          required: true
        mnc:
          $ref: '#/components/schemas/mnc'
          required: true
        tac:
          $ref: '#/components/schemas/tac'
          required: true
        nssai:
          type: array
          items:
            $ref: '#/components/schemas/nssai'
          uniqueItems: true

    served_guami:
      type: object
      properties:
        mcc:
          $ref: '#/components/schemas/mcc'
          required: true
        mnc:
          $ref: '#/components/schemas/mnc'
          required: true
        region_id:
          $ref: '#/components/schemas/region_id'
          required: true
        set_id:
          $ref: '#/components/schemas/set_id'
          required: true
        amf_pointer:
          $ref: '#/components/schemas/amf_pointer'
          required: true

    Slice:
      type: object
      properties:
        snssai:
          $ref: '#/components/schemas/nssai'
        dnns:
          description: DNNs that are supported by the slice
          type: array
          items:
            $ref: '#/components/schemas/dnn'
        qos_profile:
          $ref: '#/components/schemas/qos_profile'

    # == API objects ===========================================================
    NetworkFunctions:
      type: object
      required:
        - "smf"
        - "amf"
      properties:
        amf:
          type: object
          properties:
            ipaddr:
              $ref: '#/components/schemas/ipaddr'
        smf:
          type: object
          properties:
            ipaddr:
              $ref: '#/components/schemas/ipaddr'
        upf:
          type: object
          properties:
            ipaddr:
              $ref: '#/components/schemas/ipaddr'
    


    CoreParams:
      type: object
      required:
        - mcc
        - mnc
        - tac
      properties:
        mcc:
          $ref: '#/components/schemas/mcc'
        mnc:
          $ref: '#/components/schemas/mnc'
        tac:
          $ref: '#/components/schemas/tac'
        dnns:
          description: DNNs supported by the core
          $ref: "#/components/schemas/Dnns"
        slices:
          description: Slices implemented in the core
          type: array
          items:
            $ref: "#/components/schemas/Slice"
    
    Core:
      type: object
      properties:
        uuid:
          $ref: '#/components/schemas/uuid'
        parameters:
          $ref: '#/components/schemas/CoreParams'
          required: true
        network_functions:
          $ref: '#/components/schemas/NetworkFunctions'
        state:
          $ref: '#/components/schemas/CoreState'

    CoreState:
        type: string
        enum:
          - created
          - deploying
          - deployed
          - stopping
          - stopped

    CoreActions:
        type: string
        enum:
          - deploy
          - stop

    UE:
      description: User Equipment
      type: object
      required:
        - plnm
        - dnn
        - imsi
        - key
        - opc
      properties:
        plnm:
          $ref: '#/components/schemas/plnm'
        dnn:
          $ref: '#/components/schemas/dnn'
        imsi:
            $ref: '#/components/schemas/imsi'
        key:
          type: string
          example: "00112233445566778899aabbccddeeff"
        opc:
          type: string
          example: "98703558a143aa00a69331391e26c4a7"

    Amf:    # Validated
      type: object
      properties:
        served_guami_list:
          type: array
          items:
            $ref: '#/components/schemas/served_guami'
        plmn_support_list:
          type: array
          items:
            $ref: '#/components/schemas/plmn_support'

    Smf:    # Validated
      type: object
      properties:
        smf_info:
          type: object
          properties:
            sNssaiSmfInfoList:
              $ref: '#/components/schemas/sNssaiSmfInfoList'
        local_subscription_infos:
          $ref: '#/components/schemas/local_subscription_infos_list'

    Upf:    # Validated
      type: object
      properties:
        support_features:
          type: object
          properties:
            enable_snat:
              type: string
              enum:
                - "on"
                - "off"
        upf_info:
          type: object
          properties:
            sNssaiUpfInfoList:
              $ref: '#/components/schemas/sNssaiUpfInfoList'

    Dnns:   # Validated
      type: array
      items:
        $ref: '#/components/schemas/dnnInfo'



