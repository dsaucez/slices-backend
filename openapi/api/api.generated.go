// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
)

// Defines values for CoreActions.
const (
	Deploy CoreActions = "deploy"
	Stop   CoreActions = "stop"
)

// Defines values for CoreState.
const (
	Created   CoreState = "created"
	Deployed  CoreState = "deployed"
	Deploying CoreState = "deploying"
	Stopped   CoreState = "stopped"
	Stopping  CoreState = "stopping"
)

// Defines values for UpfSupportFeaturesEnableSnat.
const (
	Off UpfSupportFeaturesEnableSnat = "off"
	On  UpfSupportFeaturesEnableSnat = "on"
)

// Defines values for DnnInfoPduSessionType.
const (
	IPV4V6 DnnInfoPduSessionType = "IPV4V6"
	IPv4   DnnInfoPduSessionType = "IPv4"
	IPv6   DnnInfoPduSessionType = "IPv6"
)

// N5qi defines model for 5qi.
type N5qi = int

// Core defines model for Core.
type Core struct {
	NetworkFunctions *NetworkFunctions `json:"network_functions,omitempty"`
	Parameters       *CoreParams       `json:"parameters,omitempty"`
	State            *CoreState        `json:"state,omitempty"`
	Uuid             *Uuid             `json:"uuid,omitempty"`
}

// CoreActions defines model for CoreActions.
type CoreActions string

// CoreParams defines model for CoreParams.
type CoreParams struct {
	Dnns *Dnns `json:"dnns,omitempty"`

	// Mcc MCC
	Mcc Mcc `json:"mcc"`

	// Mnc MNC
	Mnc Mnc `json:"mnc"`

	// Slices Slices implemented in the core
	Slices *[]Slice `json:"slices,omitempty"`

	// Tac TAC, expressed in hexadecimal
	Tac Tac `json:"tac"`
}

// CoreState defines model for CoreState.
type CoreState string

// Dnns defines model for Dnns.
type Dnns = []DnnInfo

// Empty defines model for Empty.
type Empty = map[string]interface{}

// Error defines model for Error.
type Error struct {
	Error *string `json:"error,omitempty"`
}

// NetworkFunctions defines model for NetworkFunctions.
type NetworkFunctions struct {
	Amf struct {
		Ipaddr *Ipaddr `json:"ipaddr,omitempty"`
	} `json:"amf"`
	Smf struct {
		Ipaddr *Ipaddr `json:"ipaddr,omitempty"`
	} `json:"smf"`
	Upf *struct {
		Ipaddr *Ipaddr `json:"ipaddr,omitempty"`
	} `json:"upf,omitempty"`
}

// Slice defines model for Slice.
type Slice struct {
	// Dnns DNNs that are supported by the slice
	Dnns       *[]Dnn      `json:"dnns,omitempty"`
	QosProfile *QosProfile `json:"qos_profile,omitempty"`
	Snssai     *Nssai      `json:"snssai,omitempty"`
}

// UE User Equipment
type UE struct {
	Dnn  Dnn    `json:"dnn"`
	Imsi Imsi   `json:"imsi"`
	Key  string `json:"key"`
	Opc  string `json:"opc"`

	// Plnm PLNM
	Plnm Plnm `json:"plnm"`
}

// Upf defines model for Upf.
type Upf struct {
	SupportFeatures *struct {
		EnableSnat *UpfSupportFeaturesEnableSnat `json:"enable_snat,omitempty"`
	} `json:"support_features,omitempty"`
	UpfInfo *struct {
		SNssaiUpfInfoList *SNssaiUpfInfoList `json:"sNssaiUpfInfoList,omitempty"`
	} `json:"upf_info,omitempty"`
}

// UpfSupportFeaturesEnableSnat defines model for Upf.SupportFeatures.EnableSnat.
type UpfSupportFeaturesEnableSnat string

// Bandwidth defines model for bandwidth.
type Bandwidth = string

// Dnn defines model for dnn.
type Dnn = string

// DnnInfo defines model for dnnInfo.
type DnnInfo struct {
	Dnn            *Dnn                   `json:"dnn,omitempty"`
	Ipv4Subnet     *Ipsubnet              `json:"ipv4_subnet,omitempty"`
	PduSessionType *DnnInfoPduSessionType `json:"pdu_session_type,omitempty"`
}

// DnnInfoPduSessionType defines model for DnnInfo.PduSessionType.
type DnnInfoPduSessionType string

// Imsi defines model for imsi.
type Imsi = string

// Ipaddr defines model for ipaddr.
type Ipaddr = string

// Ipsubnet defines model for ipsubnet.
type Ipsubnet = string

// Mcc MCC
type Mcc = string

// Mnc MNC
type Mnc = string

// Nssai defines model for nssai.
type Nssai struct {
	// Sd Slice Descriptor, expressed in hexadecimal
	Sd *Sd `json:"sd,omitempty"`

	// Sst sst
	Sst Sst `json:"sst"`
}

// Plnm PLNM
type Plnm = string

// QosProfile defines model for qos_profile.
type QosProfile struct {
	N5qi          N5qi      `json:"5qi"`
	SessionAmbrDl Bandwidth `json:"session_ambr_dl"`
	SessionAmbrUl Bandwidth `json:"session_ambr_ul"`
}

// SNssaiUpfInfo defines model for sNssaiUpfInfo.
type SNssaiUpfInfo struct {
	DnnUpfInfoList *[]struct {
		Dnn *Dnn `json:"dnn,omitempty"`
	} `json:"dnnUpfInfoList,omitempty"`
	SNssai *Nssai `json:"sNssai,omitempty"`
}

// SNssaiUpfInfoList defines model for sNssaiUpfInfoList.
type SNssaiUpfInfoList = []SNssaiUpfInfo

// Sd Slice Descriptor, expressed in hexadecimal
type Sd = string

// Sst sst
type Sst = int

// Tac TAC, expressed in hexadecimal
type Tac = string

// Token JWT API token
type Token = string

// Tokenmap defines model for tokenmap.
type Tokenmap struct {
	// Token JWT API token
	Token *Token `json:"token,omitempty"`
}

// Uuid defines model for uuid.
type Uuid = string

// PostCoreParams defines parameters for PostCore.
type PostCoreParams struct {
	Token *Token `form:"token,omitempty" json:"token,omitempty"`
}

// DeleteCoreIdParams defines parameters for DeleteCoreId.
type DeleteCoreIdParams struct {
	Action *CoreActions `form:"action,omitempty" json:"action,omitempty"`
	Token  *Token       `form:"token,omitempty" json:"token,omitempty"`
}

// GetCoreIdParams defines parameters for GetCoreId.
type GetCoreIdParams struct {
	Action *CoreActions `form:"action,omitempty" json:"action,omitempty"`
	Token  *Token       `form:"token,omitempty" json:"token,omitempty"`
}

// PostCoreIdUEParams defines parameters for PostCoreIdUE.
type PostCoreIdUEParams struct {
	Token *Token `form:"token,omitempty" json:"token,omitempty"`
}

// GetCoreIdUEImsiParams defines parameters for GetCoreIdUEImsi.
type GetCoreIdUEImsiParams struct {
	Token *Token `form:"token,omitempty" json:"token,omitempty"`
}

// PostCoreIdUPFParams defines parameters for PostCoreIdUPF.
type PostCoreIdUPFParams struct {
	Token *Token `form:"token,omitempty" json:"token,omitempty"`
}

// GetCoresParams defines parameters for GetCores.
type GetCoresParams struct {
	Token *Token `form:"token,omitempty" json:"token,omitempty"`
}

// GetLogoutParams defines parameters for GetLogout.
type GetLogoutParams struct {
	Token *Token `form:"token,omitempty" json:"token,omitempty"`
}

// PostCoreJSONRequestBody defines body for PostCore for application/json ContentType.
type PostCoreJSONRequestBody = CoreParams

// PostCoreIdUEJSONRequestBody defines body for PostCoreIdUE for application/json ContentType.
type PostCoreIdUEJSONRequestBody = UE

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a core
	// (POST /core/)
	PostCore(w http.ResponseWriter, r *http.Request, params PostCoreParams)
	// Delete the core configuration
	// (DELETE /core/{id})
	DeleteCoreId(w http.ResponseWriter, r *http.Request, id Uuid, params DeleteCoreIdParams)
	// Get core configuration
	// (GET /core/{id})
	GetCoreId(w http.ResponseWriter, r *http.Request, id Uuid, params GetCoreIdParams)
	// Add a UE to the database
	// (POST /core/{id}/UE)
	PostCoreIdUE(w http.ResponseWriter, r *http.Request, id Uuid, params PostCoreIdUEParams)
	// Get UE information
	// (GET /core/{id}/UE/{imsi})
	GetCoreIdUEImsi(w http.ResponseWriter, r *http.Request, id Uuid, imsi Imsi, params GetCoreIdUEImsiParams)
	// Add a UE to the database
	// (POST /core/{id}/UPF)
	PostCoreIdUPF(w http.ResponseWriter, r *http.Request, id Uuid, params PostCoreIdUPFParams)
	// List all cores
	// (GET /cores/)
	GetCores(w http.ResponseWriter, r *http.Request, params GetCoresParams)
	// Logout the user
	// (GET /logout)
	GetLogout(w http.ResponseWriter, r *http.Request, params GetLogoutParams)
	// Generate and return an JWT API token
	// (GET /token)
	GetToken(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostCore operation middleware
func (siw *ServerInterfaceWrapper) PostCore(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostCoreParams

	var cookie *http.Cookie

	if cookie, err = r.Cookie("token"); err == nil {
		var value Token
		err = runtime.BindStyledParameterWithOptions("simple", "token", cookie.Value, &value, runtime.BindStyledParameterOptions{Explode: true, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token", Err: err})
			return
		}
		params.Token = &value

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCore(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteCoreId operation middleware
func (siw *ServerInterfaceWrapper) DeleteCoreId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteCoreIdParams

	// ------------- Optional query parameter "action" -------------

	err = runtime.BindQueryParameter("form", true, false, "action", r.URL.Query(), &params.Action)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "action", Err: err})
		return
	}

	var cookie *http.Cookie

	if cookie, err = r.Cookie("token"); err == nil {
		var value Token
		err = runtime.BindStyledParameterWithOptions("simple", "token", cookie.Value, &value, runtime.BindStyledParameterOptions{Explode: true, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token", Err: err})
			return
		}
		params.Token = &value

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCoreId(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCoreId operation middleware
func (siw *ServerInterfaceWrapper) GetCoreId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCoreIdParams

	// ------------- Optional query parameter "action" -------------

	err = runtime.BindQueryParameter("form", true, false, "action", r.URL.Query(), &params.Action)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "action", Err: err})
		return
	}

	var cookie *http.Cookie

	if cookie, err = r.Cookie("token"); err == nil {
		var value Token
		err = runtime.BindStyledParameterWithOptions("simple", "token", cookie.Value, &value, runtime.BindStyledParameterOptions{Explode: true, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token", Err: err})
			return
		}
		params.Token = &value

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCoreId(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostCoreIdUE operation middleware
func (siw *ServerInterfaceWrapper) PostCoreIdUE(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostCoreIdUEParams

	var cookie *http.Cookie

	if cookie, err = r.Cookie("token"); err == nil {
		var value Token
		err = runtime.BindStyledParameterWithOptions("simple", "token", cookie.Value, &value, runtime.BindStyledParameterOptions{Explode: true, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token", Err: err})
			return
		}
		params.Token = &value

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCoreIdUE(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCoreIdUEImsi operation middleware
func (siw *ServerInterfaceWrapper) GetCoreIdUEImsi(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Path parameter "imsi" -------------
	var imsi Imsi

	err = runtime.BindStyledParameterWithOptions("simple", "imsi", mux.Vars(r)["imsi"], &imsi, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "imsi", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCoreIdUEImsiParams

	var cookie *http.Cookie

	if cookie, err = r.Cookie("token"); err == nil {
		var value Token
		err = runtime.BindStyledParameterWithOptions("simple", "token", cookie.Value, &value, runtime.BindStyledParameterOptions{Explode: true, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token", Err: err})
			return
		}
		params.Token = &value

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCoreIdUEImsi(w, r, id, imsi, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostCoreIdUPF operation middleware
func (siw *ServerInterfaceWrapper) PostCoreIdUPF(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostCoreIdUPFParams

	var cookie *http.Cookie

	if cookie, err = r.Cookie("token"); err == nil {
		var value Token
		err = runtime.BindStyledParameterWithOptions("simple", "token", cookie.Value, &value, runtime.BindStyledParameterOptions{Explode: true, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token", Err: err})
			return
		}
		params.Token = &value

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCoreIdUPF(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCores operation middleware
func (siw *ServerInterfaceWrapper) GetCores(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCoresParams

	var cookie *http.Cookie

	if cookie, err = r.Cookie("token"); err == nil {
		var value Token
		err = runtime.BindStyledParameterWithOptions("simple", "token", cookie.Value, &value, runtime.BindStyledParameterOptions{Explode: true, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token", Err: err})
			return
		}
		params.Token = &value

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCores(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetLogout operation middleware
func (siw *ServerInterfaceWrapper) GetLogout(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLogoutParams

	var cookie *http.Cookie

	if cookie, err = r.Cookie("token"); err == nil {
		var value Token
		err = runtime.BindStyledParameterWithOptions("simple", "token", cookie.Value, &value, runtime.BindStyledParameterOptions{Explode: true, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token", Err: err})
			return
		}
		params.Token = &value

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLogout(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetToken operation middleware
func (siw *ServerInterfaceWrapper) GetToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetToken(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/core/", wrapper.PostCore).Methods("POST")

	r.HandleFunc(options.BaseURL+"/core/{id}", wrapper.DeleteCoreId).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/core/{id}", wrapper.GetCoreId).Methods("GET")

	r.HandleFunc(options.BaseURL+"/core/{id}/UE", wrapper.PostCoreIdUE).Methods("POST")

	r.HandleFunc(options.BaseURL+"/core/{id}/UE/{imsi}", wrapper.GetCoreIdUEImsi).Methods("GET")

	r.HandleFunc(options.BaseURL+"/core/{id}/UPF", wrapper.PostCoreIdUPF).Methods("POST")

	r.HandleFunc(options.BaseURL+"/cores/", wrapper.GetCores).Methods("GET")

	r.HandleFunc(options.BaseURL+"/logout", wrapper.GetLogout).Methods("GET")

	r.HandleFunc(options.BaseURL+"/token", wrapper.GetToken).Methods("GET")

	return r
}
